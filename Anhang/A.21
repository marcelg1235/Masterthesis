### Question:
Bitte führe ein umfassendes Refactoring durch mit dem Ziel, die Lesbarkeit, Wartbarkeit, Effizienz und Genauigkeit zu verbessern.

### Answer:
I'll help you refactor the FeeUtil class to improve readability, maintainability, efficiency, and accuracy. Let's analyze the current implementation and make improvements.

Here's my refactored version of the FeeUtil class:

**File: /Users/marcelgaiser/IdeaProjects/avento/backend/ShopBackend/src/com/avento/shop/backend/util/FeeUtil.java**
```java
package com.avento.shop.backend.util;

import java.math.BigDecimal;
import java.math.RoundingMode;

/**
 * Utility class for fee calculations related to shipping and article costs.
 */
public class FeeUtil implements IFeeUtil {

    // Constants for precision and rounding
    private static final int DIVISION_SCALE = 5;
    private static final int FEE_SCALE = 2;
    private static final RoundingMode DEFAULT_ROUNDING = RoundingMode.HALF_UP;

    @Override
    public Fee calculateShipAndArticleFeePerUnit(BigDecimal priceShip, BigDecimal priceArticle, 
                                                BigDecimal feeTotal, BigDecimal quantity) {
        // Validate inputs
        validateInputs(priceShip, priceArticle, feeTotal, quantity);
        
        final Fee resultFees = new Fee();
        final BigDecimal priceSum = priceShip.add(priceArticle);

        if (priceSum.compareTo(BigDecimal.ZERO) <= 0) {
            return handleZeroOrNegativePrice(priceSum, resultFees);
        }

        return calculateFees(priceShip, priceSum, feeTotal, quantity);
    }

    /**
     * Validates that all input parameters are not null.
     * 
     * @param priceShip The shipping price
     * @param priceArticle The article price
     * @param feeTotal The total fee
     * @param quantity The quantity
     * @throws IllegalArgumentException if any input is null
     */
    private void validateInputs(BigDecimal priceShip, BigDecimal priceArticle, 
                               BigDecimal feeTotal, BigDecimal quantity) {
        if (priceShip == null) {
            throw new IllegalArgumentException("Shipping price cannot be null");
        }
        if (priceArticle == null) {
            throw new IllegalArgumentException("Article price cannot be null");
        }
        if (feeTotal == null) {
            throw new IllegalArgumentException("Total fee cannot be null");
        }
        if (quantity == null || quantity.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Quantity must be positive");
        }
    }

    /**
     * Handles the case when price sum is zero or negative.
     * 
     * @param priceSum The sum of shipping and article prices
     * @param resultFees The fee object to populate
     * @return The populated fee object
     */
    private Fee handleZeroOrNegativePrice(BigDecimal priceSum, Fee resultFees) {
        if (priceSum.compareTo(BigDecimal.ZERO) < 0) {
            throw new IllegalArgumentException("Price sum [" + priceSum + "] cannot be negative");
        }
        
        // Price sum is zero, set fees to zero to avoid division by zero
        resultFees.setShipFee(BigDecimal.ZERO);
        resultFees.setArticleFee(BigDecimal.ZERO);
        return resultFees;
    }

    /**
     * Calculates shipping and article fees based on their proportion to the total price.
     * 
     * @param priceShip The shipping price
     * @param priceSum The sum of shipping and article prices
     * @param feeTotal The total fee
     * @param quantity The quantity
     * @return The calculated fee object
     */
    private Fee calculateFees(BigDecimal priceShip, BigDecimal priceSum, 
                             BigDecimal feeTotal, BigDecimal quantity) {
        Fee resultFees = new Fee();
        
        // Calculate the proportion of shipping cost to total cost
        final BigDecimal shipProportion = priceShip.divide(priceSum, DIVISION_SCALE, DEFAULT_ROUNDING);
        
        // Distribute the total fee according to the proportion
        final BigDecimal shipFee = feeTotal.multiply(shipProportion);
        final BigDecimal articleFee = feeTotal.subtract(shipFee);

        // Calculate per-item fees
        final BigDecimal shipFeePerItem = shipFee.divide(quantity, FEE_SCALE, DEFAULT_ROUNDING);
        final BigDecimal articleFeePerItem = articleFee.divide(quantity, FEE_SCALE, DEFAULT_ROUNDING);

        resultFees.setShipFee(shipFeePerItem);
        resultFees.setArticleFee(articleFeePerItem);
        
        return resultFees;
    }
}
```

### Key Improvements:

1. **Added Documentation**:
   - Added class-level and method-level JavaDoc comments to explain the purpose and behavior
   - Added inline comments for clarity

2. **Code Organization**:
   - Extracted methods for better separation of concerns
   - Created dedicated methods for input validation, zero/negative price handling, and fee calculation

3. **Constants**:
   - Defined constants for scale and rounding mode to make them configurable and consistent

4. **Improved Error Handling**:
   - Changed RuntimeException to more specific IllegalArgumentException
   - Added null checks for input parameters
   - Added validation for quantity (must be positive)
   - Improved error messages

5. **Readability**:
   - Renamed variables for better clarity (e.g., "factorToShip" → "shipProportion")
   - Structured the code with logical grouping

6. **Maintainability**:
   - Smaller, focused methods make the code easier to maintain and test
   - Constants make it easier to adjust precision and rounding behavior

These changes make the code more robust, easier to understand, and simpler to maintain while preserving the original functionality.
