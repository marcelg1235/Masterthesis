package com.avento.shop.backend.reader;

import com.avento.shop.backend.loader.IReader;
import com.avento.shop.core.ExceptionUtils;
import com.avento.shop.core.io.BlockingQueueAdapter;
import com.avento.shop.core.io.IQueue;
import org.springframework.core.io.Resource;

/**
 * XML Reader implementation that processes XML files using a specified reader.
 * The reader runs in a separate thread and communicates via a queue.
 */
public class XMLReader implements IStreamReader {

    private IQueue queue;
    private Resource file;
    private IReader reader;
    private Thread readerThread;

    /**
     * Retrieves the next record from the XML file.
     * Initializes the reader thread if not already started.
     *
     * @return The next record as a String array
     */
    @Override
    public String[] nextRecord() {
       return ExceptionUtils.runSafe(() -> {
          initializeReaderIfNeeded();
          return processNextResult();
       });
    }

    /**
     * Initializes the reader and starts the processing thread if not already done.
     */
    private void initializeReaderIfNeeded() throws Exception {
       if (queue == null) {
          queue = new BlockingQueueAdapter();
          reader.setInputStream(file.getInputStream());
          reader.setQueue(queue);

          readerThread = new Thread(reader);
          readerThread.setDaemon(true);
          readerThread.start();
       }
    }

    /**
     * Processes the next result from the queue, handling any exceptions.
     *
     * @return The next record as a String array
     * @throws Exception if an error occurs during processing
     */
    private String[] processNextResult() throws Exception {
       final Object result = queue.poll();

       if (result instanceof Throwable) {
          ExceptionUtils.throwException((Throwable) result);
       }

       return (String[]) result;
    }

    /**
     * Gets the reader used by this XMLReader.
     *
     * @return The reader instance
     */
    public IReader getReader() {
       return reader;
    }

    /**
     * Sets the reader to be used by this XMLReader.
     *
     * @param reader The reader to use
     */
    public void setReader(IReader reader) {
       this.reader = reader;
    }

    /**
     * Sets the file to be processed and resets the queue.
     * This allows the XMLReader to be reused for different files.
     *
     * @param file The resource to process
     */
    @Override
    public void setFile(Resource file) {
       this.file = file;
       this.queue = null;
       this.readerThread = null;
    }

    /**
     * Checks if the reader has been initialized.
     *
     * @return true if the reader has been initialized, false otherwise
     */
    public boolean isInitialized() {
       return queue != null && readerThread != null;
    }
}
