package com.avento.shop.backend.mail;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import com.avento.shop.core.log.ILogger;
import com.avento.shop.core.log.LogAdapter;
import com.avento.shop.core.util.IModelGenerator;
import com.avento.shop.db.domain.RowOrder;
import com.avento.shop.db.domain.RowOrderPosition;
import com.avento.shop.db.domain.RowTradeItem;

/**
 * Generates a model for order confirmation emails when an order is sent.
 * This class transforms order data into a format suitable for email templates.
 */
public class OrderSent implements IModelGenerator {

    private static final ILogger LOGGER = new LogAdapter(OrderSent.class);

    @Override
    public Map<String, Object> generateModel(Map<String, Object> parameters) {
       // Validate input parameters
       validateParameters(parameters);

       final RowOrder order = (RowOrder) parameters.get("order");
       @SuppressWarnings("unchecked")
       final List<RowTradeItem> tradeItems = (List<RowTradeItem>) parameters.get("tradeItems");

       // Create result model
       final Map<String, Object> resultModel = new HashMap<>();

       // Process order positions
       final List<PositionSentModel> positions = createPositionModels(tradeItems);

       // Create order model from the first position (if available)
       PositionSentModel orderModel = createOrderModel(tradeItems);

       // Populate the result model
       resultModel.put("order", orderModel);
       resultModel.put("positions", positions);
       resultModel.put("platformAccountId", order.getRowPlatformAccount().getId());
       resultModel.put("resellerId", order.getRowPlatformAccount().getRowReseller().getId());

       LOGGER.debug("Generated order model with {} positions", positions.size());
       return resultModel;
    }

    /**
     * Validates that all required parameters are present.
     *
     * @param parameters The input parameters map
     * @throws IllegalArgumentException if required parameters are missing
     */
    private void validateParameters(Map<String, Object> parameters) {
       if (parameters == null) {
          throw new IllegalArgumentException("Parameters map cannot be null");
       }

       final RowOrder order = (RowOrder) parameters.get("order");
       @SuppressWarnings("unchecked")
       final List<RowTradeItem> tradeItems = (List<RowTradeItem>) parameters.get("tradeItems");

       if (order == null) {
          throw new IllegalArgumentException("Required parameter 'order' is missing");
       }

       if (tradeItems == null || tradeItems.isEmpty()) {
          throw new IllegalArgumentException("Required parameter 'tradeItems' is missing or empty");
       }
    }

    /**
     * Creates position models from trade items.
     *
     * @param tradeItems List of trade items
     * @return List of position models
     */
    private List<PositionSentModel> createPositionModels(List<RowTradeItem> tradeItems) {
       final List<PositionSentModel> positions = new ArrayList<>(tradeItems.size());

       for (final RowTradeItem tradeItem : tradeItems) {
          final RowOrderPosition rowOrderPosition = tradeItem.getRowOrderPosition();
          if (rowOrderPosition == null) {
             LOGGER.warn("Trade item without order position found, skipping");
             continue;
          }

          final PositionSentModel positionModel = new PositionSentModel();
          positionModel.setQuantity(1);
          positionModel.setGtin13(rowOrderPosition.getGtin13());
          positionModel.setSinglePrice(rowOrderPosition.getPriceGross());
          positionModel.setName(rowOrderPosition.getName());

          positions.add(positionModel);
       }

       return positions;
    }

    /**
     * Creates an order model from the first valid trade item.
     *
     * @param tradeItems List of trade items
     * @return Order model or null if no valid trade items exist
     */
    private PositionSentModel createOrderModel(List<RowTradeItem> tradeItems) {
       // Find first trade item with a valid order position
       for (final RowTradeItem tradeItem : tradeItems) {
          final RowOrderPosition rowOrderPosition = tradeItem.getRowOrderPosition();
          if (rowOrderPosition != null) {
             final PositionSentModel orderModel = new PositionSentModel();
             orderModel.fill(rowOrderPosition);
             return orderModel;
          }
       }

       LOGGER.warn("No valid order position found to create order model");
       return null;
    }
}
