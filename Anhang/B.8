package com.avento.shop.backend.mail;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

import com.avento.shop.core.util.IModelGenerator;
import com.avento.shop.db.domain.RowOrder;
import com.avento.shop.db.domain.RowOrderPosition;
import com.avento.shop.db.domain.RowOrderPositionType;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class CustomerFeedbackSent implements IModelGenerator {

    private static final String CUSTOMER_FEEDBACK = "customerFeedback";
    private static final Log LOG = LogFactory.getLog(CustomerFeedbackSent.class);

    @Override
    public Map<String, Object> generateModel(Map<String, Object> parameters) {
       final RowOrder rowOrder = (RowOrder) parameters.get(CUSTOMER_FEEDBACK);
       if (rowOrder == null) {
          throw new IllegalArgumentException("customerFeedback is missing");
       }

       final Map<String, Object> map = new HashMap<>();
       final CustomerFeedbackSentModel customerInfo = createCustomerInfo(rowOrder);

       map.put(CUSTOMER_FEEDBACK, customerInfo);
       map.put("platformAccountId", rowOrder.getRowPlatformAccount().getId());
       map.put("resellerId", rowOrder.getRowPlatformAccount().getRowReseller().getId());

       return map;
    }

    private CustomerFeedbackSentModel createCustomerInfo(final RowOrder rowOrder) {
       final CustomerFeedbackSentModel customerInfo = new CustomerFeedbackSentModel();

       if (rowOrder.getRowDeliveryAddress() != null) {
          customerInfo.setFirstName(rowOrder.getRowDeliveryAddress().getFirstname());
          customerInfo.setLastName(rowOrder.getRowDeliveryAddress().getLastname());
          customerInfo.setAddress1(rowOrder.getRowDeliveryAddress().getAddress1());
          customerInfo.setAddress2(rowOrder.getRowDeliveryAddress().getAddress2());
          customerInfo.setAddress3(rowOrder.getRowDeliveryAddress().getAddress3());
          customerInfo.setZip(rowOrder.getRowDeliveryAddress().getZip());
          customerInfo.setCity(rowOrder.getRowDeliveryAddress().getCity());
          customerInfo.setState(rowOrder.getRowDeliveryAddress().getState());
          customerInfo.setCountryName(rowOrder.getRowDeliveryAddress().getRowCountry().getName());
          customerInfo.setCompany(rowOrder.getRowDeliveryAddress().getCompany());
       } else {
          LOG.warn("Delivery address is null for order: " + rowOrder.getId());
       }

       customerInfo.setOrderId(rowOrder.getId());
       customerInfo.setPlatformOrderId(rowOrder.getPlatformOrderId());
       customerInfo.setOrderDate(rowOrder.getOrderDate());
       customerInfo.setOip(new LinkedList<>());
       customerInfo.setTotalCosts(BigDecimal.ZERO);
       customerInfo.setShippingCosts(BigDecimal.ZERO);
       customerInfo.setPlatformAccountName(rowOrder.getRowPlatformAccount().getAccountname());

       if (rowOrder.getRowsOrderPosition() != null) {
          for (final RowOrderPosition rowOrderPosition : rowOrder.getRowsOrderPosition()) {
             processOrderPosition(customerInfo, rowOrderPosition);
          }
       } else {
          LOG.warn("No order positions found for order: " + rowOrder.getId());
       }

       return customerInfo;
    }

    private void processOrderPosition(final CustomerFeedbackSentModel customerInfo, final RowOrderPosition rowOrderPosition) {
       if (RowOrderPositionType.ARTICLE.equals(rowOrderPosition.getRowOrderPositionType())) {
          final CustomerFeedbackSentModel.Position customerInfoPosition = createPosition(rowOrderPosition);

          boolean found = false;
          for (final CustomerFeedbackSentModel.Position oip : customerInfo.getOip()) {
             if (oip.getGtin13().equals(rowOrderPosition.getGtin13())) {
                updateExistingPosition(customerInfo, oip, rowOrderPosition);
                found = true;
                break;
             }
          }

          if (!found) {
             addNewPosition(customerInfo, customerInfoPosition);
          }
       } else if (RowOrderPositionType.SHIPPING.equals(rowOrderPosition.getRowOrderPositionType())) {
          customerInfo.setShippingCosts(customerInfo.getShippingCosts().add(rowOrderPosition.getPriceGross()));
       }
    }

    private CustomerFeedbackSentModel.Position createPosition(final RowOrderPosition rowOrderPosition) {
       final CustomerFeedbackSentModel.Position customerInfoPosition = new CustomerFeedbackSentModel.Position();
       customerInfoPosition.setSinglePrice(rowOrderPosition.getPriceGross());
       customerInfoPosition.setTotalPerItemPrice(rowOrderPosition.getPriceGross());
       customerInfoPosition.setQuantity(BigDecimal.ONE);
       customerInfoPosition.setName(rowOrderPosition.getName());
       customerInfoPosition.setGtin13(rowOrderPosition.getGtin13());
       return customerInfoPosition;
    }

    private void updateExistingPosition(final CustomerFeedbackSentModel customerInfo, final CustomerFeedbackSentModel.Position oip,
                               final RowOrderPosition rowOrderPosition) {
       oip.setQuantity(oip.getQuantity().add(BigDecimal.ONE));
       oip.setTotalPerItemPrice(oip.getSinglePrice().multiply(oip.getQuantity()));
       customerInfo.setTotalCosts(customerInfo.getTotalCosts().add(oip.getSinglePrice()));
    }

    private void addNewPosition(final CustomerFeedbackSentModel customerInfo, final CustomerFeedbackSentModel.Position customerInfoPosition) {
       customerInfo.setTotalCosts(customerInfo.getTotalCosts().add(customerInfoPosition.getSinglePrice()));
       customerInfo.getOip().add(customerInfoPosition);
    }
}
